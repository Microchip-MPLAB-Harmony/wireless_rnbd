var SearchFiles = ["GUID-ECC427C8-48F8-4167-BECF-02C990005150.html","GUID-FD7607C5-B9DC-40AF-A442-230D2EDAE762.html","GUID-3690B0D7-2719-4C6C-ABB9-D451DF7C4E7D.html","GUID-C5C76898-C1DC-456B-B573-3B6C53D3E1F7.html","GUID-3A0EE1D4-F09E-458E-9362-41B80E7092CE.html","GUID-52B655CB-AB35-4467-AA52-614EC4BCD5D0.html","GUID-9ACEC2DE-6D12-4848-B56C-E9B0ED99D683.html","GUID-C5AC2C77-2C95-4385-9E22-E460412BB771.html","GUID-7688150C-955A-466E-9355-E3D7ED78392C.html","GUID-216EAECD-12C6-4FF9-886E-65BCB605B891.html"];

var SearchTitles = ["Introduction",
"Getting Started with Software Development",
"Non Trust Zone Project Setup",
"Trust Zone Project Setup",
"Running RNBD and RN487x Example Application",
"RNBD Example1: Running Basic Data Exchange Example Application",
"RNBD Example2: Running Transparent UART Example Application",
"Running RN487x Example Application",
"RN487x Example1: Running Basic Data Exchange Example Application",
"RN487x Example2: Running Transparent UART Example Application"];

var SearchInfo = [" Introduction  The MPLAB® Code Configurator RNBD / RN4870/1 BLE Modules Library allows quick and easy configuration of the C code generated software driver based upon the user’s selected API features available from the MCC Library Generated Driver code supports use of either BLE Module with use of a 32 Bit PIC Devices   The library module uses a Graphic User Interface (GUI) presented by MCC within MPLABX which allows for selection of desired configuration and custom configurations of the protocol Customized C code is generated within the MPLABX project in a folder named \"MCC Generated Files\"   This Library uses (1) UART (1) GPIO and DELAY support at minimal  Refer to the /images folder for source files max resolution  ",
							" Getting Started with Software Development  Steps to install IDE compiler tool chain BLE Zigbee stacks and application examples on your PC  This guide will walk you through setting up your development environment with all required dependencies versions If you are already familiar Microchip Tools then you can find a table summarizing the dependencies below  Tools and Harmony Component Versions           IDE Compiler and MCC plugin  Version  Location      MPLAB X IDE  v6 05  MPLAB X IDE Website    XC32 Compiler  v4 10 or above  Web    Microchip Code Configurator(MCC)  5 2 1 or above  MPLAB X IDE Tools Plugins    Device Family Pack (DFP) Non-Trust Zone  SAML21_DFP (v3 6 105)  Device: ATSAML21J18B    Device Family Pack (DFP) Trust Zone  PIC32CM-LS_DFP (v1 1 162)  Device: PIC32CM5164LS00100       Harmony Components :          Harmony components to be cloned with MCC Content Manager  Version      csp  v3 14 0    core  v3 11 1    dev_packs  v3 14 0    bsp  v3 14 0    CMSIS-FreeRTOS  v10 4 6    devices  v1 1 0       ",
							" Non Trust Zone Project Setup    Create MPLAB Harmany Project with below device and DFP version   Device: ATSAML21J18B  XC32 Compiler: v4 10  DFP: SAML21_DFP (v3 6 105)   1 1 Create new 32-bit MCC Harmony Project as shown below   1 2 Select the Framework Path (Framework path must match SDK setup document)and select Next   1 3 Select Project Folder and select Next   1 4 Select the device \"ATSAML21J18B\" for standalone project using the SAML21 device family in the \"Target Device\" and click Finish   1 5 MPLABx Code Configurator will be launched automatically Then Select \"MPLAB Harmony\" and Click Next for the Harmony Framework Path   1 6 Select \"Finish\"   1 7 Project Graph window of the Configurator may have predefined components   Right click on the project properties and verify the selected configuration    After creating the project as shown in the above step go to device resource and verify RNBD was under Wireless component   Click on Plus icon under RNBD to add it under the Project Resource    Project Graph and RNBD/RN487x Module Configuration   User can Select RNBD or RN487x under the Select Module Type Drop Down either of the one as shown below    Selecting Example Application   Expand the Drop down under Select Example Application option and choose any one as mentioned in the below  Basic Data Exchange  Transparent UART Application      4 1 Basic Data Exchange:   Basic Data Exchange uses only ONE SERCOM for the Data Transmission         4 2 Transparent UART:  Transparent UART Application uses TWO SERCOM as a Dependency for the Data Transmission     SERCOM0 Pin Setting is same as mentioned under Basic Data Exchange above         PIN Settings for Example Application:  Basic Data Exchange Pin Settings    Transparent UART Pin Settings     Code Generation and adding the example application to main c   After making the all the above settings click on Generate in which code will be generated for RNBD or RN487x as per the selection    Once after Generation is complete include the headers for RNBD or RN487x as shown below  if Select Module Type is selected for RNBD : #include \"examples/rnbd_example h\"  if Select Module Type is selected for RN487x : #include \"examples/rn487x_example h\"   Call the function RNBD_Example_Initialized(); or RN487x_Example_Initialized(); in main() after SYS_Initialize ( NULL );     Build the Generated Project:    Program to the Development Board      This is the End of Non-Trust Zone project kindly refer RNBD or RN487x Running Example Application  ",
							" Trust Zone Project Setup    Create MPLAB Harmany Project with below device and DFP version  Device: PIC32CM5164LS00100  XC32 Compiler: v4 10  DFP: PIC32CM-LS_DFP (v1 1 162) 1 1 Create new 32-bit MCC Harmony Project as shown below   1 2 Select the Framework Path (Framework path must match SDK setup document)and select Next   1 3 Select Project Folder and select Next   1 4 Select the device \"PIC32CM5164LS00100\" for standalone project using the PIC32CM-LS device family in the \"Target Device\" and click Finish   1 5 MPLABx Code Configurator will be launched automatically Then Select \"MPLAB Harmony\" and Click Next for the Harmony Framework Path   1 6 Select \"Finish\"   1 7 Project Graph window of the Configurator may have predefined components   Right click on the project properties and verify the selected configuration     After creating the project as shown in the above step go to device resource and verify RNBD was under Wireless component   Click on Plus icon under RNBD to add it under the Project Resource    Project Graph and RNBD/RN487x Module Configuration   User can Select RNBD or RN487x under the Select Module Type Drop Down either of the one as shown below    Selecting Example Application   Expand the Drop down under Select Example Application option and choose any one as mentioned in the below   Basic Data Exchange  Transparent UART Application       4 1 Basic Data Exchange:   Basic Data Exchange uses only ONE SERCOM for the Data Transmission       4 2 Transparent UART  Transparent UART Application uses TWO SERCOM as a Dependency for the Data Transmission       SERCOM3 Pin Setting is same as mentioned under Basic Data Exchange above       PIN Settings for Example Application:   Basic Data Exchange Pin Settings    Transparent UART Pin Settings      Enabling RNBD/RN487x Secure and Non Secure for Trust Zone Devices Click the below check box to Enable and Disable RNBD secure    Table for Secure and Non-Secure Configuration           S no  RNBD Secure (Check Box in the UI)  Dependency(SERCOM)  Pins      1  Non Secure  Non Secure  Non Secure    2  Non Secure  Secure  Non Secure    3  Secure  Secure  Secure       If RNBD Secure (Check Box in the UI) is marked to secure then BT_RST pin settings should be Secured and if RNBD Secure (Check Box in the UI) is marked to Non-secure then BT_RST pin settings should be Non-Secure    Case1: (RNBD: Non-Secure Dependency: Non-Secure BT_RST Pin: Non-Secure)   RNBD Secure (Check Box in the UI) – Unchecked (Non-Secure) as shown below       Dependency – Non-Secure    Goto – Project Graph – expand the plugins drop down – and select Arm TRUSTZONE for Armv8-M     Select Peripheral Configuration as shown below      NOTE: Set SERCOM2 from secure to Non-Secure as shown below (Applicable for Transparent UART if TWO  SERCOM was used)        Pin Settings – Non-Secure    Goto – Project Graph – expand the plugins drop down – and select Pin Configuration as shown below    Set BT_RST pin to Non-Secure under PIN Security Mode as shown below       Project Structure: Click Generate Button under Project Resource for Code Generation to the selected configuration      Adding example application to main c   Once after Generation is complete include the headers for RNBD or RN487x as shown below  if Select Module Type is selected n is for RNBD : #include \"examples/rnbd_example h\"  if Select Module Type is selected for RN487x : #include \"examples/rn487x_example h\"   Call the function RNBD_Example_Initialized(); or RN487x_Example_Initialized(); in main() after SYS_Initialize ( NULL );     Build the Generated Project:    Program to the Development Board   This is the End of Case1 project kindly refer RNBD or RN487x Running Example Application   Case 2: (RNBD: Non-Secur e Dependency : Secure BT_RST Pin: Non-Secure )   RNBD Secure (Check Box in the UI) – Unchecked (Non-Secure) as shown below    Dependency – Secure   Goto – Project Graph – expand the plugins drop down – and select Arm TRUSTZONE for Armv8-M  Select Peripheral Configuration as shown below    NOTE : Set SERCOM2 from secure to Non-Secure as shown below (Applicable for Transparent UART if TWO  SERCOM was used)    Pin Settings – Non-Secure   Goto – Project Graph – expand the plugins drop down – and select Pin Configuration as shown below    Set BT_RST pin to Non-Secure under PIN Security Mode as shown below      Project Folder Structure: Click Generate Button under Project Resource for Code Generation to the selected configuration      Adding example application to main c   Once after Generation is complete include the headers for RNBD or RN487x as shown below  if Select Module Type is selected for RNBD : #include \"examples/rnbd_example h\"  if Select Module Type is selected for RN487x : #include \"examples/rn487x_example h\"   Call the function RNBD_Example_Initialized(); or RN487x_Example_Initialized(); in main() after SYS_Initialize ( NULL );     Build the Generated Project:    Program to the Development Board   This is the End of Case2 project kindly refer RNBD or RN487x Running Example Application    Case 3 : (RNBD: Secure Dependency: Secure BT_RST Pin: Secure )   Scenario 1:   RNBD Secure (Check Box in the UI) – Enable Check (Secure)   Generate RNBD Non Secure Entry check box Disabled (Unchecked) as shown below       Dependency – Secure    Goto – Project Graph – expand the plugins drop down – and select Arm TRUSTZONE for Armv8-M     Select Peripheral Configuration as shown below     NOTE : Set SERCOM2 from secure to Non-Secure as shown below (Applicable for Transparent UART if TWO  SERCOM was used)     Pin Settings – Secure   Goto – Project Graph – expand the plugins drop down – and select Pin Configuration as shown below    Set BT_RST pin to Non-Secure under PIN Security Mode as shown below      Project Folder Structure: Click Generate Button under Project Resource for Code Generation to the selected configuration      Adding example application to main c   Once after Generation is complete include the headers for RNBD or RN487x as shown below  if Select Module Type is selected for RNBD : #include \"examples/rnbd_example h\"  if Select Module Type is selected for RN487x : #include \"examples/rn487x_example h\"   Call the function RNBD_Example_Initialized(); or RN487x_Example_Initialized(); in main() after SYS_Initialize ( NULL );     Build the Generated Project:    Program to the Development Board    This is the End of Case3 – Scenario 1 project kindly refer RNBD or RN487x Running Example Application  Scenario 2 :   RNBD Secure (Check Box in the UI) – Enable Check (Secure)  Generate RNBD Non Secure Entry check box Enabled (checked) as shown below     Dependency – Secure    Goto – Project Graph – expand the plugins drop down – and select Arm TRUSTZONE for Armv8-M     Select Peripheral Configuration as shown below     NOTE : Set SERCOM2 from secure to Non-Secure as shown below (Applicable for Transparent UART if TWO  SERCOM was used)     Pin Settings – Secure   Goto – Project Graph – expand the plugins drop down – and select Pin Configuration as shown below    Set BT_RST pin to Non-Secure under PIN Security Mode as shown below      Project Folder Structure: Click Generate Button under Project Resource for Code Generation to the selected configuration   Verify the RNBD/RN487x Non-Secure Entry code Generation as shown below    Adding example application to main c   Once after Generation is complete include the headers for RNBD or RN487x as shown below  if Select Module Type is selected for RNBD : #include \"examples/rnbd_example h\"  if Select Module Type is selected for RN487x : #include \"examples/rn487x_example h\"   Call the function RNBD_Example_Initialized(); or RN487x_Example_Initialized(); in main() after SYS_Initialize ( NULL );     Build the Generated Project:    Program to the Development Board   This is the End of Case3 – Scenario 2 project kindly refer RNBD or RN487x Running Example Application          ",
							" Running RNBD and RN487x Example Application  This Topic explains us briefly regarding Running RNBD451 for Basic Data Exchange and Transparent UART Application  ",
							" RNBD Example1: Running Basic Data Exchange Example Application  Basic Data Exchange:       This example shows how an MCU can be programmed to transmit data to a smart phone over BLE Here the MCU device will send Periodic Transmission of a single character when STREAM_OPEN is processed through the Message Handler This indicates to the MCU RNBD Module that the application is in a DATA STREAMING mode of operation; and can expect to hear data over the BLE connection #define DEMO_PERIODIC_TRANSMIT_COUNT (10000) #define DEMO_PERIODIC_CHARACTER (‘1’) Are used in the example can be found #defined at the top of rnbd_example c           Download and Install Phone Application for demonstration:  Microchip Bluetooth Data by Microchip from the App Store or from Google Play Store    Launch the Phone Application   Click on the 'BLE Smart' Sub Apps as shown below:  The Application scans the area for Bluetooth devices within a range Look for \"RNBD\" devices under the scanned list    On selecting the \"RNBD\" device from the list will be ready to connect with RNBD Module once you click on CONNECT Button    Once connected the Microchip Bluetooth App discovers all the services and characteristics supported by the RNBD451 device as shown in the following figure  Click the Microchip Data Service Option and Select the Microchip Data Characteristic and Write Notify Indication to receive the data in Mobile App  Select Listen for notifications on the application   It may be required to \"enable notification\" access to the app on the phone  Data will begin to Send at a Periodic Rate to the device  Data will become visible beneath the Notify/Listen Toggle Option   Before Enabling the Notify/Indicate Toggle Button: After Enabling the Notify/Indicate Toggle Button Mobile App can read the data 31(Hex Value) which was sent from RNBD Module       This is the END of the Basic Data Exchange Example  ",
							" RNBD Example2: Running Transparent UART Example Application            Transparent Serial:       This example will demostrat data transmitted from a PC serial terminal is written to a smart phone app and vice versa The MCU device will act as a bridge and pass data between RNBD Module ← MCU → Serial Terminal  This action will occur when STREAM_OPEN is processed through the Message Handler For this example data typed into the Serial Terminal will appear on the BLE Phone Application and Data sent from the Application will appear on the Serial Terminal         Download and Install Phone Application for demonstration:  Microchip Bluetooth Data by Microchip from the App Store or from Google Play    Launch the Phone Application   After Installing open the MBD App and Click on BLE UART Sub Apps:    On Selecting PIC32CXBZ scan for available devices to connect The Application scans the area for Bluetooth devices within a range Look for \"RNBD\" devices under the scanned list    For Transparent Serial only: Open a \"Serial Terminal\" Program such as Tera Term Realterm PuTTY Serial; or similar Baud Rate will be configured as: 115200      Once Connected with RNBD451_0EC4 click on Text Mode at bottom of the settings as shown below to initiate the data transfer   - Check Serial Terminal for the status of the connection    Enter the text to be transferred from mobile to RNB45x device and click send button   - The data will be received at the RNBD45x side and will be displayed in serial terminal of RNBD45x    Type any data on the serial terminal of the RNBD45x to send to the Microchip Bluetooth Data App which is received and printed on the receive view of the Microchip Bluetooth App        This is the END of the Transparent UART Example  ",
							" Running RN487x Example Application  This Topic explains us briefly regarding Running RN487x for Basic Data Exchange and Transparent UART Application  ",
							" RN487x Example1: Running Basic Data Exchange Example Application  Basic Data Exchange:       This example shows how an MCU can be programmed to transmit data to a smart phone over BLE Here the MCU device will send Periodic Transmission of a single character when STREAM_OPEN is processed through the Message Handler This indicates to the MCU RN487x Module that the application is in a DATA STREAMING mode of operation; and can expect to hear data over the BLE connection #define DEMO_PERIODIC_TRANSMIT_COUNT (10000) #define DEMO_PERIODIC_CHARACTER (‘1’) Are used in the example can be found #defined at the top of rnbd_example c           Download and Install Phone Application for demonstration:  Microchip Bluetooth Data by Microchip from the App Store or from Google Play Store    Launch the Phone Application   Click on the 'BLE Smart' Sub Apps as shown below:  The Application scans the area for Bluetooth devices within a range Look for \"RN487x\" devices under the scanned list    On selecting the \"RN487x\" device from the list will be ready to connect with RNBD Module once you click on CONNECT Button    Once connected the Microchip Bluetooth App discovers all the services and characteristics supported by the RN487x device as shown in the following figure    Click the Microchip Data Service Option and Select the Microchip Data Characteristic and Write Notify Indication to receive the data in Mobile App    Select Listen for notifications on the application   It may be required to \"enable notification\" access to the app on the phone  Data will begin to Send at a Periodic Rate to the device  Data will become visible beneath the Notify/Listen Toggle Option   Before Enabling the Notify/Indicate Toggle Button:   After Enabling the Notify/Indicate Toggle Button Mobile App can read the data 31(Hex Value) which was sent from RN487x Module       This is the END of the Basic Data Exchange Example  ",
							" RN487x Example2: Running Transparent UART Example Application            Transparent Serial:       This example will demostrat data transmitted from a PC serial terminal is written to a smart phone app and vice versa The MCU device will act as a bridge and pass data between RNBD Module ← MCU → Serial Terminal  This action will occur when STREAM_OPEN is processed through the Message Handler For this example data typed into the Serial Terminal will appear on the BLE Phone Application and Data sent from the Application will appear on the Serial Terminal         Download and Install Phone Application for demonstration:  Microchip Bluetooth Data by Microchip from the App Store or from Google Play    Launch the Phone Application   After Installing open the MBD App and Click on BLE UART Sub Apps:    On Selecting BM70 scan for available devices to connect   Click on the below Scan image to scan the Nearby \"RN487x-xxxx\"   The Application scans the area for Bluetooth devices within a range Look for \"RN487x-xxxx\" devices under the scanned list    For Transparent Serial only: Open a \"Serial Terminal\" Program such as Tera Term Realterm PuTTY Serial; or similar Baud Rate will be configured as: 115200      Once Connected with RN487x-xxxx click on Transfer data to device as shown below to initiate the data transfer   - Check Serial Terminal for the status of the connection    Enter the text to be transferred from mobile to RN487x-xxxx device and click send button   - The data will be received at the RN487x-xxxx side and will be displayed in serial terminal of RNBD45x    Type any data on the serial terminal of the RN487x-xxxx to send to the Microchip Bluetooth Data App which is received and printed on the receive view of the Microchip Bluetooth App       "];

